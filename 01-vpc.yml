AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC and network resources"

Parameters:

  Environment:
    Description: The name of the environment of the VPC.
    Type: String

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"

  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      InstanceTenancy: default
      Tags:
        - Key: "Name"
          Value: !Ref "Environment"

        - Key: "Environment"
          Value: !Ref "Environment"

        - Key: "Application"
          Value: !Ref "AWS::StackName"

  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

        - Key: "Network"
          Value: "Public"

        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "Environment"
              - "-public-"
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

        - Key: "Network"
          Value: "Public"

        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "Environment"
              - "-public-"
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

        - Key: "Network"
          Value: "Public"
          
        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "Environment"
              - "-IGW"
    
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"
        
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

        - Key: "Network"
          Value: "Public"

        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "Environment"
              - "-public-route-table"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"

        - Key: "Network"
          Value: "Public"

        - Key: "Name"
          Value: !Join
            - ""
            - - !Ref "Environment"
              - "-public-nacl"

  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: False
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: 100
      Protocol: -1
      RuleAction: "allow"
      Egress: True
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535

  ElasticIP0:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 188.114.111.207/32
          IpProtocol: "-1"

Outputs:

  VPCId:
    Description: "VPCId of VPC"
    Value:
      Ref: "VPC"
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"

  PublicSubnet0:
    Description: "SubnetId of public subnet 0"
    Value:
      Ref: "PublicSubnet0"
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet0"

  PublicSubnet1:
    Description: "SubnetId of public subnet 1"
    Value:
      Ref: "PublicSubnet1"
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"

  DefaultSecurityGroup:
    Description: "DefaultSecurityGroup Id"
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-DefaultSecurityGroup"
